import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import List, Optional, Dict
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError, ChannelPrivateError
from telethon.tl.types import Message
from config import API_ID, API_HASH, SESSION_NAME, DATABASE_NAME, ChannelConfig
from database import Database

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def ensure_utc(dt: datetime) -> datetime:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ datetime aware –∏ –≤ UTC."""
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

class ChannelReposter:
    def __init__(self):
        self.db = Database(DATABASE_NAME)
        self.client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        self.active_tasks: Dict[int, asyncio.Task] = {}

    async def start(self):
        await self.client.start()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        self._register_handlers()
        await self._restart_active_channels()
        await self.client.run_until_disconnected()

    async def _restart_active_channels(self):
        channels = self.db.get_all_channels()
        for config in channels:
            if config.is_active:
                logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞ {config.channel_id}")
                self._start_channel_task(config)

    def _start_channel_task(self, config: ChannelConfig):
        if config.channel_id in self.active_tasks:
            self.active_tasks[config.channel_id].cancel()
        self.active_tasks[config.channel_id] = asyncio.create_task(
            self._channel_worker(config)
        )

    async def _channel_worker(self, config: ChannelConfig):
        logger.info(f"–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {config.channel_id}")
        while config.is_active:
            try:
                config = self.db.get_channel(config.channel_id)
                if not config or not config.is_active:
                    break
                await self._process_channel(config)
                await asyncio.sleep(300)
            except FloodWaitError as e:
                logger.warning(f"Flood wait –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}")
                await asyncio.sleep(60)
        logger.info(f"–í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {config.channel_id}")

    async def _process_channel(self, config: ChannelConfig):
        now = datetime.now(timezone.utc)
        start_date = ensure_utc(config.start_date)
        last_repost_date = ensure_utc(config.last_repost_date)
        if now < start_date:
            logger.info(f"–ö–∞–Ω–∞–ª {config.channel_id} –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
            return
        time_diff = now - last_repost_date
        posts_needed = int((time_diff.total_seconds() / 86400) * config.posts_per_day)
        if posts_needed < 1:
            return
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ {config.channel_id}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {posts_needed} –ø–æ—Å—Ç–æ–≤")
        try:
            channel = await self._get_entity(config.channel_id)
            messages = await self._fetch_messages(channel, last_repost_date, posts_needed)
            if not messages:
                logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {config.channel_id}")
                return
            grouped_messages = self._group_messages(messages)
            sent_count = 0
            for message_group in grouped_messages:
                if sent_count >= posts_needed:
                    break
                if await self._forward_messages(channel, message_group):
                    sent_count += 1
                    self.db.update_last_repost(config.channel_id, now)
                    delay = getattr(config, 'interval_seconds', None) or (86400 / config.posts_per_day)
                    await asyncio.sleep(delay)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {config.channel_id}")
        except ChannelPrivateError:
            logger.error(f"–ö–∞–Ω–∞–ª {config.channel_id} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            config.is_active = False
            self.db.add_channel(config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {config.channel_id}: {str(e)}")

    async def _get_entity(self, channel_id: int):
        try:
            return await self.client.get_entity(channel_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entity {channel_id}: {str(e)}")
            raise

    async def _fetch_messages(self, channel, offset_date: datetime, limit: int) -> List[Message]:
        try:
            offset_date = ensure_utc(offset_date)
            return await self.client.get_messages(
                channel,
                limit=min(limit * 3, 100),
                offset_date=offset_date
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            return []

    def _group_messages(self, messages: List[Message]) -> List[List[Message]]:
        albums = []
        single_messages = []
        grouped = {}
        for msg in reversed(messages):
            if not msg:
                continue
            if getattr(msg, 'grouped_id', None):
                grouped.setdefault(msg.grouped_id, []).append(msg)
            else:
                single_messages.append(msg)
        for group in sorted(grouped.values(), key=lambda x: x[0].date):
            albums.append(sorted(group, key=lambda m: m.id))
        return albums + [[msg] for msg in single_messages]

    async def _forward_messages(self, target_channel, messages: List[Message]) -> bool:
        if not messages or not any(messages):
            return False
        try:
            send_as = await self._get_send_as_entity(target_channel)
            first_msg = messages[0]
            if len(messages) == 1:
                return await self._send_single_message(target_channel, first_msg, send_as)
            return await self._send_album(target_channel, messages, send_as)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            return False

    async def _get_send_as_entity(self, channel):
        try:
            return await self.client.get_entity(channel)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å send_as entity: {str(e)}")
            return None

    async def _send_single_message(self, target_channel, message: Message, send_as) -> bool:
        has_content = bool(message.text or message.media)
        if not has_content:
            logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
        try:
            await self.client.send_message(
                entity=target_channel,
                message=message.text or "",
                file=message.media,
                link_preview=bool(getattr(message, 'web_preview', False)),
                buttons=getattr(message, 'buttons', None),
                send_as=send_as
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def _send_album(self, target_channel, messages: List[Message], send_as) -> bool:
        media = []
        captions = []
        for msg in messages:
            if msg and msg.media:
                media.append(msg.media)
                captions.append(msg.text or "")
        if not media:
            logger.warning("–í –∞–ª—å–±–æ–º–µ –Ω–µ—Ç –º–µ–¥–∏–∞")
            return False
        try:
            await self.client.send_file(
                entity=target_channel,
                file=media,
                caption=captions[0] if captions else "",
                send_as=send_as
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {str(e)}")
            return False

    def _register_handlers(self):
        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            help_text = (
                "üì¢ –ë–æ—Ç —Ä–µ–ø–æ—Å—Ç–µ—Ä –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/add_channel <ID> [–ì–ì–ì–ì-–ú–ú-–î–î] [–ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å] [–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Å–µ–∫] - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                "/set_limit <ID> <N> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å\n"
                "/start_channel <ID> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥\n"
                "/stop_channel <ID> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥\n"
                "/channel_info <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "/repost_history <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞> [–ª–∏–º–∏—Ç] - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–ø–æ—Å—Ç\n"
                "/repost_history_slow <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞> <–¥–∞—Ç–∞> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> [–ª–∏–º–∏—Ç] - –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ—Å—Ç"
            )
            await event.reply(help_text)

        @self.client.on(events.NewMessage(pattern='/add_channel'))
        async def add_channel_handler(event):
            try:
                args = event.text.split()
                if len(args) < 2:
                    return await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add_channel <ID> [–¥–∞—Ç–∞] [–ª–∏–º–∏—Ç] [–∏–Ω—Ç–µ—Ä–≤–∞–ª]")
                channel_id = int(args[1])
                if not await self._validate_channel(channel_id):
                    return await event.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                params = self._parse_channel_params(args[2:])
                config = ChannelConfig(
                    channel_id=channel_id,
                    posts_per_day=params['limit'],
                    start_date=ensure_utc(params['date']),
                    last_repost_date=datetime.now(timezone.utc),
                    is_active=True,
                    interval_seconds=params['interval']
                )
                self.db.add_channel(config)
                self._start_channel_task(config)
                response = (
                    f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                    f"ID: {channel_id}\n"
                    f"–°—Ç–∞—Ä—Ç: {params['date'].strftime('%Y-%m-%d')}\n"
                    f"–ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {params['limit']}\n"
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {params['interval'] or '–∞–≤—Ç–æ'} —Å–µ–∫"
                )
                await event.reply(response)
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/set_limit'))
        async def set_limit_handler(event):
            try:
                args = event.text.split()
                if len(args) < 3:
                    return await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /set_limit <ID> <–ø–æ—Å—Ç–æ–≤_–≤_–¥–µ–Ω—å>")
                channel_id = int(args[1])
                posts_per_day = int(args[2])
                config = self.db.get_channel(channel_id)
                if not config:
                    return await event.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                config.posts_per_day = posts_per_day
                self.db.add_channel(config)
                await event.reply(f"‚úÖ –î–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç {posts_per_day} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/channel_info'))
        async def channel_info_handler(event):
            try:
                args = event.text.split()
                if len(args) < 2:
                    return await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /channel_info <ID>")
                channel_id = int(args[1])
                config = self.db.get_channel(channel_id)
                if not config:
                    return await event.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                info = (
                    f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:\n"
                    f"ID: {config.channel_id}\n"
                    f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if config.is_active else '–ù–µ—Ç'}\n"
                    f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {config.start_date.strftime('%Y-%m-%d')}\n"
                    f"–ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {config.posts_per_day}\n"
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.interval_seconds or '–∞–≤—Ç–æ'} —Å–µ–∫\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ø–æ—Å—Ç: {config.last_repost_date.strftime('%Y-%m-%d %H:%M:%S')}"
                )
                await event.reply(info)
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/repost_history '))
        async def repost_history_handler(event):
            try:
                args = event.text.split()
                if len(args) < 3:
                    return await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /repost_history <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞> [–ª–∏–º–∏—Ç]")
                from_channel = int(args[1])
                to_channel = int(args[2])
                limit = int(args[3]) if len(args) > 3 else 10
                await self._fast_repost(from_channel, to_channel, limit, event)
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/repost_history_slow'))
        async def repost_history_slow_handler(event):
            try:
                args = event.text.split()
                if len(args) < 5:
                    return await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /repost_history_slow <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞> <–¥–∞—Ç–∞> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> [–ª–∏–º–∏—Ç]")
                from_channel = int(args[1])
                to_channel = int(args[2])
                date = ensure_utc(datetime.strptime(args[3], "%Y-%m-%d"))
                interval = int(args[4])
                limit = int(args[5]) if len(args) > 5 else 10
                await self._slow_repost(from_channel, to_channel, date, interval, limit, event)
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/start_channel'))
        async def start_channel_handler(event):
            try:
                channel_id = int(event.text.split()[1])
                config = self.db.get_channel(channel_id)
                if not config:
                    return await event.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                config.is_active = True
                self.db.add_channel(config)
                self._start_channel_task(config)
                await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/stop_channel'))
        async def stop_channel_handler(event):
            try:
                channel_id = int(event.text.split()[1])
                config = self.db.get_channel(channel_id)
                if not config:
                    return await event.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                config.is_active = False
                self.db.add_channel(config)
                if channel_id in self.active_tasks:
                    self.active_tasks[channel_id].cancel()
                    del self.active_tasks[channel_id]
                await event.reply(f"‚è∏ –ö–∞–Ω–∞–ª {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def _parse_channel_params(self, args: List[str]) -> Dict:
        params = {
            'date': datetime.now(timezone.utc),
            'limit': 5,
            'interval': None
        }
        if not args:
            return params
        try:
            naive_date = datetime.strptime(args[0], "%Y-%m-%d")
            params['date'] = naive_date.replace(tzinfo=timezone.utc)
            args = args[1:]
        except (ValueError, IndexError):
            pass
        if args:
            try:
                params['limit'] = max(1, int(args[0]))
                args = args[1:]
            except (ValueError, IndexError):
                pass
        if args:
            try:
                params['interval'] = max(1, int(args[0]))
            except (ValueError, IndexError):
                pass
        return params

    async def _validate_channel(self, channel_id: int) -> bool:
        try:
            entity = await self.client.get_entity(channel_id)
            return hasattr(entity, 'title')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            return False

    async def _fast_repost(self, from_channel: int, to_channel: int, limit: int, event):
        try:
            from_entity = await self._get_entity(from_channel)
            to_entity = await self._get_entity(to_channel)
            messages = await self.client.get_messages(from_entity, limit=limit)
            count = 0
            for msg in reversed(messages):
                if not msg or (not msg.text and not msg.media):
                    continue
                await self.client.send_message(
                    entity=to_entity,
                    message=msg.text or "",
                    file=msg.media,
                    link_preview=bool(getattr(msg, 'web_preview', False)),
                    buttons=getattr(msg, 'buttons', None)
                )
                count += 1
                await asyncio.sleep(1)
            await event.reply(f"‚úÖ –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {from_channel} –≤ {to_channel}")
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–ø–æ—Å—Ç–µ: {str(e)}")

    async def _slow_repost(self, from_channel: int, to_channel: int, date: datetime, interval: int, limit: int, event):
        try:
            from_entity = await self._get_entity(from_channel)
            to_entity = await self._get_entity(to_channel)
            messages = await self.client.get_messages(from_entity, limit=limit, offset_date=date)
            count = 0
            for msg in reversed(messages):
                if not msg or (not msg.text and not msg.media):
                    continue
                await self.client.send_message(
                    entity=to_entity,
                    message=msg.text or "",
                    file=msg.media,
                    link_preview=bool(getattr(msg, 'web_preview', False)),
                    buttons=getattr(msg, 'buttons', None)
                )
                count += 1
                await asyncio.sleep(interval)
            await event.reply(f"‚úÖ –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {from_channel} –≤ {to_channel} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫")
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ—Å—Ç–µ: {str(e)}")

async def main():
    reposter = ChannelReposter()
    await reposter.start()

if __name__ == '__main__':
    asyncio.run(main())