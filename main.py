import asyncio
import logging
from datetime import datetime, timezone
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
from config import API_ID, API_HASH, SESSION_NAME, DATABASE_NAME, ChannelConfig
from database import Database

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

class ChannelReposter:
    def __init__(self):
        self.db = Database(DATABASE_NAME)
        self.client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

    async def start(self):
        await self.client.start()
        logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ MTProto")
        self._register_handlers()
        asyncio.create_task(self._scheduler())
        await self.client.run_until_disconnected()

    def _register_handlers(self):
        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            await event.reply(
                "üì¢ –†–µ–ø–æ—Å—Ç–µ—Ä –∫–∞–Ω–∞–ª–æ–≤\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/add_channel <ID> - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                "/set_limit <ID> <N> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å N –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å\n"
                "/repost_history <from> <to> [limit=10] - –†–µ–ø–æ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏\n"
                "/repost_history_slow <from> <to> <start_date:YYYY-MM-DD> <interval_seconds> [limit] - –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏"
            )

        @self.client.on(events.NewMessage(pattern='/add_channel'))
        async def add_channel_handler(event):
            try:
                parts = event.text.split()
                if len(parts) < 2:
                    await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add_channel <ID>")
                    return
                channel_id = int(parts[1])
                if await self._validate_channel(channel_id):
                    config = ChannelConfig(
                        channel_id=channel_id,
                        posts_per_day=5,
                        start_date=datetime.now(),
                        last_repost_date=datetime.now()
                    )
                    self.db.add_channel(config)
                    await event.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    await event.reply(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/set_limit'))
        async def set_limit_handler(event):
            try:
                parts = event.text.split()
                if len(parts) < 3:
                    await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /set_limit <ID> <N>")
                    return
                channel_id = int(parts[1])
                new_limit = int(parts[2])
                config = self.db.get_channel(channel_id)
                if not config:
                    await event.reply(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                config.posts_per_day = new_limit
                self.db.add_channel(config)
                await event.reply(f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_limit} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/repost_history'))
        async def repost_history_handler(event):
            try:
                parts = event.text.split()
                if len(parts) < 3:
                    await event.reply("‚ùå –§–æ—Ä–º–∞—Ç: /repost_history <from> <to> [limit=10]")
                    return
                source = int(parts[1])
                target = int(parts[2])
                limit = int(parts[3]) if len(parts) > 3 else 10
                count = await self.repost_history(source, target, limit)
                await event.reply(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {source} –≤ {target}")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        @self.client.on(events.NewMessage(pattern='/repost_history_slow'))
        async def repost_history_slow_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
                command = event.text.strip()
                parts = command.split()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                if len(parts) < 5:
                    await event.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                        "/repost_history_slow <from_id> <to_id> <YYYY-MM-DD> <interval> [limit]\n\n"
                        "–ü—Ä–∏–º–µ—Ä:\n"
                        "/repost_history_slow -1002213645726 -1002213645726 2024-01-01 3600 10"
                    )
                    return

                # –ü–∞—Ä—Å–∏–º ID –∫–∞–Ω–∞–ª–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏)
                try:
                    source_id = int(parts[1])
                    target_id = int(parts[2])
                except ValueError:
                    await event.reply("‚ùå ID –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
                    return

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
                try:
                    date_str = parts[3]
                    if len(date_str) != 10 or date_str.count('-') != 2:
                        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
                    start_date = datetime.strptime(date_str, "%Y-%m-%d").replace(tzinfo=timezone.utc)
                except ValueError:
                    await event.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01"
                    )
                    return

                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)
                try:
                    interval = int(parts[4])
                    if interval <= 0:
                        raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                except ValueError:
                    await event.reply(
                        "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥!\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: 3600 –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞"
                    )
                    return

                # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                limit = 1000  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if len(parts) > 5:
                    try:
                        limit = int(parts[5])
                        if limit <= 0:
                            raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                    except ValueError:
                        await event.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                        return

                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ—Å—Ç
                await event.reply(
                    f"‚úÖ –ù–∞—á–∏–Ω–∞—é –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ—Å—Ç...\n"
                    f"- –ò–∑ –∫–∞–Ω–∞–ª–∞: {source_id}\n"
                    f"- –í –∫–∞–Ω–∞–ª: {target_id}\n"
                    f"- –ù–∞—á–∏–Ω–∞—è —Å –¥–∞—Ç—ã: {start_date.strftime('%Y-%m-%d')}\n"
                    f"- –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫.\n"
                    f"- –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}"
                )

                count = await self.repost_history_slow(source_id, target_id, start_date, interval, limit)
                
                await event.reply(
                    f"‚úÖ –†–µ–ø–æ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                    f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π"
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ repost_history_slow: {str(e)}")
                await event.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                return

    async def _validate_channel(self, channel_id: int) -> bool:
        try:
            entity = await self.client.get_entity(channel_id)
            return hasattr(entity, 'title')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            return False

    async def _scheduler(self):
        while True:
            try:
                await self._process_channels()
                await asyncio.sleep(300)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}")

    async def _process_channels(self):
        try:
            channels = self.db.get_all_channels()
            for config in channels:
                if config.is_active:
                    await self._process_channel(config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")

    async def _process_channel(self, config: ChannelConfig):
        try:
            time_diff = datetime.now() - config.last_repost_date
            posts_needed = int((time_diff.total_seconds() / 86400) * config.posts_per_day)
            if posts_needed < 1:
                return

            channel = await self.client.get_entity(config.channel_id)
            messages = await self.client.get_messages(
                channel,
                limit=min(posts_needed, 100),
                offset_date=datetime.now()
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ MessageService)
            filtered_messages = [msg for msg in reversed(messages) if not msg.action]

            for msg in filtered_messages:
                try:
                    await self.client.forward_messages(channel, msg)
                    self.db.update_last_repost(config.channel_id, datetime.now())
                    await asyncio.sleep(86400 / config.posts_per_day)
                except FloodWaitError as e:
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–æ—Å—Ç–∞: {str(e)}")

        except FloodWaitError as e:
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {config.channel_id}: {str(e)}")

    async def repost_history(self, source: int, target: int, limit: int = 10):
        try:
            src = await self.client.get_entity(source)
            dst = await self.client.get_entity(target)
            messages = []
            async for msg in self.client.iter_messages(src, limit=limit):
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ MessageService)
                if not msg.action:
                    messages.append(msg)
                await asyncio.sleep(0.5)
            for msg in reversed(messages):
                await self.client.forward_messages(dst, msg)
                await asyncio.sleep(1)
            return len(messages)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            raise

    async def repost_history_slow(self, source: int, target: int, start_date: datetime, interval: int, limit: int = 1000):
        try:
            src = await self.client.get_entity(source)
            dst = await self.client.get_entity(target)
            messages = []
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—è —Å start_date (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã)
            async for msg in self.client.iter_messages(src, offset_date=start_date, reverse=True):
                if not msg.action and msg.date >= start_date:
                    messages.append(msg)
                    if len(messages) >= limit:
                        break
            sent = 0
            for msg in messages:
                await self.client.forward_messages(dst, msg)
                sent += 1
                await asyncio.sleep(interval)
            return sent
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞: {str(e)}")
            raise

async def main():
    reposter = ChannelReposter()
    await reposter.start()

if __name__ == '__main__':
    asyncio.run(main())
